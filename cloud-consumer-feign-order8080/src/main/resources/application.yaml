server:
  port: 8080
spring:
  application:
    name: cloud-consumer-openfeign-order
  cloud:
    consul:
      host: localhost
      discovery:
        service-name: ${spring.application.name}
        prefer-ip-address: true # 是否优先使用服务 IP 进行注册
      port: 8500
    openfeign:
      client:
        config:
          default:
            # 默认的连接超时
            connect-timeout: 4000
            # 默认的读取超市
            read-timeout: 4000
          cloud-payment-service: # 细粒度的会覆盖 default
            # 为专属的服务设置超时时间
            connect-timeout: 4000
            # 为专属的服务设置读取超时时间
            read-timeout: 4000
      compression:
        request:
          enabled: true
          min-request-size: 2048 # 最小触发的压缩的大小
          mime-types: text/xml,application/xml,application/json # 触发压缩的类型
        response:
          enabled: true

      # Apache Httpclient5 配置开启
      httpclient:
        hc5:
          enabled: true
      # 开启 circuitbreaker 和分组激活 spring.cloud.openfeign.circuitbreaker.enable
      circuitbreaker:
        enabled: true
        # 没开分组永远不用分组的配置，精确优先，分组次之，默认最后
        group:
          enabled: true

# 开启日志打印
#logging:
#  level:
#    com:
#      learngenie:
#        cloud:
#          apis:
#            PayFeignApi: debug

# resilience4j 配置
#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        failure-rate-threshold: 50 # 设置 50% 的调用失败时打开断路器，超过失败请求百分比 CircuitBreak 变为 Open 状态
#        sliding-window-type: count_based # 滑动窗口的类型
#        sliding-window-size: 6 # 滑动窗口的大小，配置 COUNT_BASE 表示 6 个请求，配置 TIME_BASE 表示 6 秒
#        minimum-number-of-calls: 6 # 断路器计算失败或者慢调用率之前所需的最小样本（每个滑动窗口的周期）。如果 minimumNumberOfCalls 为 10，代表必须全部成功
#        automatic-transition-from-open-to-half-open-enabled: true # 是否允许从开启状态到半开状态
#        wait-duration-in-open-state: 5s # 从开启到半开需要多长时间
#        permitted-number-of-calls-in-half-open-state: 2 # 半开状态允许的请求数目
#        record-exceptions:
#          - java.lang.Exception
#    instances:
#      cloud-payment-service:
#        base-config: default

resilience4j:
  timelimiter:
    configs:
      default:
        timeout-duration: 10s # 神坑的位置，timelimiter 默认是 1s，超过一秒就超时异常了，配置了降级，就走降级的逻辑
  circuitbreaker:
    configs:
      default:
        failure-rate-threshold: 50 # 设置 50% 的调用失败时打开断路器，超过失败请求百分比 CircuitBreak 变为 Open 状态
        slow-call-duration-threshold: 2s # 慢调用时间阈值，高于这个阈值被视为慢调用，并增加慢调用比例
        slow-call-rate-threshold: 30 # 慢调用比例，把超过 slow-call-duration-threshold 被称为慢调用，如果调用的比例大于 30%
        sliding-window-type: time_based # 滑动窗口的类型
        sliding-window-size: 2 # 滑动窗口的大小，配置 COUNT_BASE 表示 6 个请求，配置 TIME_BASE 表示 6 秒
        minimum-number-of-calls: 2 # 断路器计算失败或者慢调用率之前所需的最小样本（每个滑动窗口的周期）。如果 minimumNumberOfCalls 为 10，代表必须全部成功
        automatic-transition-from-open-to-half-open-enabled: true # 是否允许从开启状态到半开状态
        wait-duration-in-open-state: 5s # 从开启到半开需要多长时间
        permitted-number-of-calls-in-half-open-state: 2 # 半开状态允许的请求数目
        record-exceptions:
          - java.lang.Exception
    instances:
      cloud-payment-service:
        base-config: default

